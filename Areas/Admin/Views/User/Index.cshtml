@model UserManagementViewModel
@{
    ViewData["Title"] = "Quản lý người dùng";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Admin/User/index.css" />
}

<div class="admin-page-header">
    <div class="d-flex justify-content-between align-items-center flex-wrap">
        <div>
            <h1 class="admin-page-title">
                <i class="fas fa-users"></i>
                Quản lý người dùng
            </h1>
            <p class="admin-page-subtitle">Quản lý tài khoản và phân quyền người dùng trong hệ thống</p>
        </div>
        <div class="header-actions">
            <a asp-action="Create" class="btn-create">
                <i class="fas fa-plus"></i>
                Thêm người dùng
            </a>
        </div>
    </div>
</div>

<!-- Statistics Cards -->
<div class="stats-cards">
    <div class="stat-card total">
        <div class="stat-value">@(Model.Users?.Count() ?? 0)</div>
        <p class="stat-label">Tổng người dùng</p>
    </div>
    <div class="stat-card admin">
        <div class="stat-value">@(Model.Users?.Count(u => u.Roles.Contains("Admin")) ?? 0)</div>
        <p class="stat-label">Quản trị viên</p>
    </div>
    <div class="stat-card manager">
        <div class="stat-value">@(Model.Users?.Count(u => u.Roles.Contains("Manager")) ?? 0)</div>
        <p class="stat-label">Quản lý</p>
    </div>
    <div class="stat-card customer">
        <div class="stat-value">@(Model.Users?.Count(u => u.Roles.Contains("Customer")) ?? 0)</div>
        <p class="stat-label">Khách hàng</p>
    </div>
</div>

<!-- Search and Filter -->
<div class="admin-search-section">
    <h5 class="search-title">
        <i class="fas fa-search"></i>
        Tìm kiếm và lọc
    </h5>
    <form method="get" class="row g-3">
        <div class="col-md-4">
            <label class="form-label">Tìm kiếm</label>
            <input type="text" name="searchTerm" value="@Model.SearchTerm" class="form-control"
                placeholder="Tên, email, địa chỉ...">
        </div>
        <div class="col-md-3">
            <label class="form-label">Vai trò</label>
            <select name="roleFilter" class="form-select">
                <option value="">Tất cả vai trò</option>
                <option value="Admin" selected="@(Model.RoleFilter == "Admin")">Admin</option>
                <option value="Manager" selected="@(Model.RoleFilter == "Manager")">Manager</option>
                <option value="Customer" selected="@(Model.RoleFilter == "Customer")">Customer</option>
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">Trạng thái</label>
            <select name="statusFilter" class="form-select">
                <option value="">Tất cả trạng thái</option>
                <option value="active">Hoạt động</option>
                <option value="inactive">Vô hiệu hóa</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">&nbsp;</label>
            <button type="submit" class="btn-search">
                <i class="fas fa-search me-2"></i>Tìm kiếm
            </button>
        </div>
    </form>
</div>

<!-- Users Table -->
<div class="admin-content-section">
    <div class="table-responsive">
        <table class="table users-table">
            <thead>
                <tr>
                    <th>Người dùng</th>
                    <th>Vai trò</th>
                    <th>Trạng thái</th>
                    <th>Ngày tạo</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Users != null && Model.Users.Any())
                {
                    @foreach (var user in Model.Users)
                    {
                        <tr>
                            <td>
                                <div class="user-info">
                                    <div class="user-avatar">
                                        @(user.FirstName?.Substring(0, 1).ToUpper() ?? "U")
                                    </div>
                                    <div class="user-details">
                                        <h6>@user.FullName</h6>
                                        <p class="user-email">@user.Email</p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="role-badges">
                                    @foreach (var role in user.Roles)
                                    {
                                        <span class="role-badge role-@role.ToLower()">@role</span>
                                    }
                                </div>
                            </td>
                            <td>
                                <span class="status-badge status-@(user.IsActive ? "active" : "inactive")">
                                    <i class="fas fa-@(user.IsActive ? "check-circle" : "times-circle")"></i>
                                    @(user.IsActive ? "Hoạt động" : "Vô hiệu hóa")
                                </span>
                            </td>
                            <td>@user.CreatedAt.ToString("dd/MM/yyyy")</td>
                            <td>
                                <div class="action-buttons">
                                    <a asp-action="Details" asp-route-id="@user.Id" class="btn-action btn-view"
                                        title="Xem chi tiết">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@user.Id" class="btn-action btn-edit" title="Chỉnh sửa">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button" class="btn-action btn-toggle"
                                        onclick="toggleUserStatus('@user.Id', @user.IsActive.ToString().ToLower())"
                                        title="@(user.IsActive ? "Vô hiệu hóa" : "Kích hoạt")">
                                        <i class="fas fa-@(user.IsActive ? "ban" : "check")"></i>
                                    </button>
                                    <button type="button" class="btn-action btn-delete"
                                        onclick="deleteUser('@user.Id', '@user.FullName')" title="Xóa người dùng">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center py-4">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Không tìm thấy người dùng nào</h5>
                            <p class="text-muted">Thử thay đổi bộ lọc hoặc tạo người dùng mới</p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Pagination -->
@if (Model.TotalPages > 1)
{
    <nav class="admin-pagination">
        <ul class="pagination">
            @if (Model.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link"
                        href="@Url.Action("Index", new { page = Model.CurrentPage - 1, searchTerm = Model.SearchTerm, roleFilter = Model.RoleFilter })">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            }

            @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link"
                        href="@Url.Action("Index", new { page = i, searchTerm = Model.SearchTerm, roleFilter = Model.RoleFilter })">@i</a>
                </li>
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link"
                        href="@Url.Action("Index", new { page = Model.CurrentPage + 1, searchTerm = Model.SearchTerm, roleFilter = Model.RoleFilter })">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            }
        </ul>
    </nav>
}

<!-- Hidden form for actions -->
<form id="actionForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
    <input type="hidden" id="actionUserId" name="id" />
</form>

@section Scripts {
    <script>
        function toggleUserStatus(userId, isActive) {
            const action = isActive ? 'vô hiệu hóa' : 'kích hoạt';
            if (confirm(`Bạn có chắc chắn muốn ${action} người dùng này?`)) {
                const form = document.getElementById('actionForm');
                form.action = '@Url.Action("ToggleStatus")';
                document.getElementById('actionUserId').value = userId;
                form.submit();
            }
        }

        function deleteUser(userId, userName) {
            if (confirm(`Bạn có chắc chắn muốn xóa người dùng "${userName}"?\n\nHành động này không thể hoàn tác!`)) {
                const form = document.getElementById('actionForm');
                form.action = '@Url.Action("Delete")';
                document.getElementById('actionUserId').value = userId;
                form.submit();
            }
        }

        // Animate table rows on load
        document.addEventListener('DOMContentLoaded', function () {
            const rows = document.querySelectorAll('.users-table tbody tr');
            rows.forEach((row, index) => {
                row.style.opacity = '0';
                row.style.transform = 'translateY(20px)';
                row.style.transition = `all 0.6s ease ${index * 0.1}s`;

                setTimeout(() => {
                    row.style.opacity = '1';
                    row.style.transform = 'translateY(0)';
                }, 100 + (index * 100));
            });

            // Animate stat cards
            const statCards = document.querySelectorAll('.stat-card');
            statCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                card.style.transition = `all 0.6s ease ${index * 0.1}s`;

                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 200 + (index * 100));
            });
        });
    </script>
}