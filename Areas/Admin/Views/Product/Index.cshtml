@model ProductManagementViewModel
@{
    ViewData["Title"] = "Quản lý sản phẩm";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .products-header {
        background: linear-gradient(135deg, var(--secondary-color) 0%, #059669 100%);
        color: white;
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

        .products-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 25s linear infinite;
        }

    @@keyframes rotate {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .products-title {
        font-size: 2.5rem;
        font-weight: 800;
        margin-bottom: 0.5rem;
        position: relative;
        z-index: 1;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .products-subtitle {
        font-size: 1.125rem;
        opacity: 0.9;
        margin-bottom: 0;
        position: relative;
        z-index: 1;
    }

    .header-actions {
        position: relative;
        z-index: 1;
    }

    .btn-create {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-create:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            color: white;
        }

    .search-section {
        background: var(--surface-color);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

        .search-section:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
        }

    .search-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--dark-color);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .search-title i {
            color: var(--secondary-color);
        }

    .form-label {
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 0.5rem;
    }

    .form-control,
    .form-select {
        border: 2px solid var(--surface-dark);
        border-radius: 12px;
        padding: 0.75rem 1rem;
        background-color: var(--surface-dark);
        color: var(--dark-color);
        transition: all 0.3s ease;
    }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--secondary-color);
            background-color: var(--surface-color);
            box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.1);
            outline: none;
        }

    .btn-search {
        background: linear-gradient(135deg, var(--secondary-color), #059669);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        transition: all 0.3s ease;
        width: 100%;
    }

        .btn-search:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(16, 185, 129, 0.3);
        }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .product-card {
        background: var(--surface-color);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        position: relative;
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s ease forwards;
    }

        .product-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

    @@keyframes fadeInUp {
        to

    {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .product-image-wrapper {
        position: relative;
        height: 200px;
        overflow: hidden;
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image {
        transform: scale(1.1);
    }

    .no-image {
        width: 100%;
        height: 100%;
        background: var(--surface-dark);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--gray-color);
    }

    .product-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.8), rgba(5, 150, 105, 0.8));
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .product-card:hover .product-overlay {
        opacity: 1;
    }

    .btn-view {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-view:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.05);
            color: white;
        }

    .product-content {
        padding: 1.5rem;
    }

    .product-title {
        font-size: 1.125rem;
        font-weight: 700;
        color: var(--dark-color);
        margin-bottom: 0.5rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.4;
        height: calc(1.4em * 2);
    }

    .category-badge {
        background: rgba(16, 185, 129, 0.1);
        color: var(--secondary-color);
        padding: 0.375rem 0.75rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 1rem;
        display: inline-block;
    }

    .product-description {
        color: var(--gray-color);
        font-size: 0.875rem;
        line-height: 1.5;
        margin-bottom: 1rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        height: calc(1.5em * 2);
    }

    .product-price {
        font-size: 1.5rem;
        font-weight: 800;
        color: var(--secondary-color);
        margin-bottom: 1rem;
    }

    .product-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-edit {
        background: linear-gradient(135deg, #f59e0b, #d97706);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        flex: 1;
        text-align: center;
        font-size: 0.875rem;
    }

        .btn-edit:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(245, 158, 11, 0.3);
            color: white;
        }

    .btn-delete {
        background: linear-gradient(135deg, #ef4444, #dc2626);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        flex: 1;
        font-size: 0.875rem;
    }

        .btn-delete:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(239, 68, 68, 0.3);
            color: white;
        }

    .empty-state {
        background: var(--surface-color);
        border-radius: 20px;
        padding: 4rem 2rem;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }

        .empty-state i {
            font-size: 4rem;
            color: var(--gray-color);
            margin-bottom: 1.5rem;
            opacity: 0.5;
        }

        .empty-state h4 {
            color: var(--dark-color);
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .empty-state p {
            color: var(--gray-color);
            margin-bottom: 2rem;
        }

    .btn-refresh {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-refresh:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(99, 102, 241, 0.3);
            color: white;
        }

    .pagination-wrapper {
        display: flex;
        justify-content: center;
        margin-top: 2rem;
    }

    .pagination {
        background: var(--surface-color);
        border-radius: 12px;
        padding: 0.5rem;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    }

    .page-link {
        border: none;
        color: var(--dark-color);
        padding: 0.75rem 1rem;
        margin: 0 0.25rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

        .page-link:hover {
            background: var(--secondary-color);
            color: white;
        }

    .page-item.active .page-link {
        background: var(--secondary-color);
        color: white;
    }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: var(--surface-color);
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            border-radius: 16px 16px 0 0;
        }

        .stat-card.total::before {
            background: linear-gradient(90deg, var(--secondary-color), #059669);
        }

        .stat-card.categories::before {
            background: linear-gradient(90deg, #f59e0b, #d97706);
        }

        .stat-card.active::before {
            background: linear-gradient(90deg, var(--primary-color), var(--primary-dark));
        }

        .stat-card.inactive::before {
            background: linear-gradient(90deg, #6b7280, #4b5563);
        }

    .stat-value {
        font-size: 2rem;
        font-weight: 800;
        color: var(--dark-color);
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: var(--gray-color);
        font-weight: 500;
        margin-bottom: 0;
    }

    @@media (max-width: 991px) {
        .products-title

    {
        font-size: 2rem;
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .products-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    }

    @@media (max-width: 768px) {
        .products-header

    {
        padding: 1.5rem;
    }

    .products-title {
        font-size: 1.75rem;
    }

    .search-section {
        padding: 1.5rem;
    }

    .products-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .stats-cards {
        grid-template-columns: repeat(2, 1fr);
    }

    }</style>

<div class="products-header">
    <div class="d-flex justify-content-between align-items-center flex-wrap">
        <div>
            <h1 class="products-title">
                <i class="fas fa-box"></i>
                Quản lý sản phẩm
            </h1>
            <p class="products-subtitle">Danh sách sản phẩm và các tùy chọn quản lý</p>
        </div>
        <div class="header-actions">
            <a asp-action="Create" class="btn-create">
                <i class="fas fa-plus"></i>
                Thêm sản phẩm
            </a>
        </div>
    </div>
</div>

<!-- Statistics Cards -->
<div class="stats-cards">
    <div class="stat-card total">
        <div class="stat-value">@Model.Products.Count()</div>
        <p class="stat-label">Tổng sản phẩm</p>
    </div>
    <div class="stat-card categories">
        <div class="stat-value">@Model.Categories.Count()</div>
        <p class="stat-label">Danh mục</p>
    </div>
    @* <div class="stat-card active">
        <div class="stat-value">@Model.Products.Count(p => p.IsActive)</div>
        <p class="stat-label">Đang bán</p>
    </div>
    <div class="stat-card inactive">
        <div class="stat-value">@Model.Products.Count(p => !p.IsActive)</div>
        <p class="stat-label">Ngừng bán</p>
    </div> *@
</div>

<!-- Search and Filter -->
<div class="search-section">
    <h5 class="search-title">
        <i class="fas fa-filter"></i>
        Bộ lọc & Tìm kiếm
    </h5>
    <form method="get" class="row g-3">
        <div class="col-md-5">
            <label class="form-label">Tìm kiếm sản phẩm</label>
            <input type="text" name="searchTerm" value="@Model.SearchTerm" class="form-control"
                   placeholder="Nhập tên sản phẩm...">
        </div>
        <div class="col-md-4">
            <label class="form-label">Danh mục</label>
            <select name="categoryFilter" class="form-select">
                <option value="">Tất cả danh mục</option>
                @foreach (var category in Model.Categories)
                {
                    <option value="@category.Id" selected="@(Model.CategoryFilter == category.Id)">@category.Name</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">&nbsp;</label>
            <button type="submit" class="btn-search">
                <i class="fas fa-search me-2"></i>Lọc kết quả
            </button>
        </div>
    </form>
</div>

<!-- Products Grid -->
@if (Model.Products.Any())
{
    <div class="products-grid">
        @foreach (var (product, index) in Model.Products.Select((value, i) => (value, i)))
        {
            <div class="product-card" style="animation-delay: @((index * 0.1) + 0.1)s">
                <div class="product-image-wrapper">
                    @if (!string.IsNullOrEmpty(product.ImgUrl))
                    {
                        <img src="@product.ImgUrl" class="product-image" alt="@product.ProductName">
                    }
                    else
                    {
                        <div class="no-image">
                            <i class="fas fa-image fa-3x"></i>
                        </div>
                    }
                    <div class="product-overlay">
                        <a asp-action="Details" asp-route-id="@product.Id" class="btn-view">
                            <i class="fas fa-eye"></i>
                            Xem chi tiết
                        </a>
                    </div>
                </div>
                <div class="product-content">
                    <h6 class="product-title" title="@product.ProductName">@product.ProductName</h6>
                    <span class="category-badge">@product.CategoryName</span>

                    @if (!string.IsNullOrEmpty(product.Description))
                    {
                        <p class="product-description">@product.Description</p>
                    }
                    else
                    {
                        <p class="product-description text-muted fst-italic">Không có mô tả.</p>
                    }

                    <div class="product-price">@product.Price.ToString("C0")</div>

                    <div class="product-actions">
                        <a asp-action="Edit" asp-route-id="@product.Id" class="btn-edit">
                            <i class="fas fa-edit me-1"></i> Sửa
                        </a>
                        <form asp-action="Delete" method="post" class="d-inline" style="flex: 1;">
                            <input type="hidden" name="id" value="@product.Id" />
                            <button type="submit" class="btn-delete w-100"
                                    onclick="return confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')">
                                <i class="fas fa-trash me-1"></i> Xóa
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="empty-state">
        <i class="fas fa-box-open"></i>
        <h4>Không tìm thấy sản phẩm nào</h4>
        <p>Vui lòng thử điều chỉnh bộ lọc hoặc từ khóa tìm kiếm của bạn.</p>
        <a asp-action="Index" class="btn-refresh">
            <i class="fas fa-sync-alt"></i>
            Làm mới danh sách
        </a>
    </div>
}

<!-- Pagination -->
@if (Model.TotalPages > 1)
{
    <div class="pagination-wrapper">
        <nav aria-label="Product navigation">
            <ul class="pagination">
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link"
                           href="@Url.Action("Index", new { page = Model.CurrentPage - 1, searchTerm = Model.SearchTerm, categoryFilter = Model.CategoryFilter })">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                }

                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link"
                           href="@Url.Action("Index", new { page = i, searchTerm = Model.SearchTerm, categoryFilter = Model.CategoryFilter })">@i</a>
                    </li>
                }

                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link"
                           href="@Url.Action("Index", new { page = Model.CurrentPage + 1, searchTerm = Model.SearchTerm, categoryFilter = Model.CategoryFilter })">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
}

@section Scripts {
    <script>
        // Animate elements on load
        document.addEventListener('DOMContentLoaded', function() {
            // Animate search section
            const searchSection = document.querySelector('.search-section');
            searchSection.style.opacity = '0';
            searchSection.style.transform = 'translateY(20px)';
            searchSection.style.transition = 'all 0.6s ease 0.2s';

            setTimeout(() => {
                searchSection.style.opacity = '1';
                searchSection.style.transform = 'translateY(0)';
            }, 200);

            // Animate stat cards
            const statCards = document.querySelectorAll('.stat-card');
            statCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                card.style.transition = `all 0.6s ease ${0.1 + (index * 0.1)}s`;

                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100 + (index * 100));
            });

            // Animate pagination
            const pagination = document.querySelector('.pagination-wrapper');
            if (pagination) {
                pagination.style.opacity = '0';
                pagination.style.transform = 'translateY(20px)';
                pagination.style.transition = 'all 0.6s ease 1s';

                setTimeout(() => {
                    pagination.style.opacity = '1';
                    pagination.style.transform = 'translateY(0)';
                }, 1000);
            }

            // Add hover effect to product cards
            const productCards = document.querySelectorAll('.product-card');
            productCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-10px)';
                });

                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        });
    </script>
}