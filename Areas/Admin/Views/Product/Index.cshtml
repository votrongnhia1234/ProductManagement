@model ProductManagementViewModel
@{
    ViewData["Title"] = "Quản lý sản phẩm";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}
@section Styles {
    <link rel="stylesheet" href="~/css/Admin/Product/index.css" />
}

<div class="products-header">
    <div class="d-flex justify-content-between align-items-center flex-wrap">
        <div>
            <h1 class="products-title">
                <i class="fas fa-box"></i>
                Quản lý sản phẩm
            </h1>
            <p class="products-subtitle">Danh sách sản phẩm và các tùy chọn quản lý</p>
        </div>
        <div class="header-actions">
            <a asp-action="Create" class="btn-create">
                <i class="fas fa-plus"></i>
                Thêm sản phẩm
            </a>
        </div>
    </div>
</div>

<!-- Statistics Cards -->
<div class="stats-cards">
    <div class="stat-card total">
        <div class="stat-value">@Model.Products.Count()</div>
        <p class="stat-label">Tổng sản phẩm</p>
    </div>
    <div class="stat-card categories">
        <div class="stat-value">@Model.Categories.Count()</div>
        <p class="stat-label">Danh mục</p>
    </div>
    @* <div class="stat-card active">
        <div class="stat-value">@Model.Products.Count(p => p.IsActive)</div>
        <p class="stat-label">Đang bán</p>
    </div>
    <div class="stat-card inactive">
        <div class="stat-value">@Model.Products.Count(p => !p.IsActive)</div>
        <p class="stat-label">Ngừng bán</p>
    </div> *@
</div>

<!-- Search and Filter -->
<div class="search-section">
    <h5 class="search-title">
        <i class="fas fa-filter"></i>
        Bộ lọc & Tìm kiếm
    </h5>
    <form method="get" class="row g-3">
        <div class="col-md-5">
            <label class="form-label">Tìm kiếm sản phẩm</label>
            <input type="text" name="searchTerm" value="@Model.SearchTerm" class="form-control"
                   placeholder="Nhập tên sản phẩm...">
        </div>
        <div class="col-md-4">
            <label class="form-label">Danh mục</label>
            <select name="categoryFilter" class="form-select">
                <option value="">Tất cả danh mục</option>
                @foreach (var category in Model.Categories)
                {
                    <option value="@category.Id" selected="@(Model.CategoryFilter == category.Id)">@category.Name</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">&nbsp;</label>
            <button type="submit" class="btn-search">
                <i class="fas fa-search me-2"></i>Lọc kết quả
            </button>
        </div>
    </form>
</div>

<!-- Products Grid -->
@if (Model.Products.Any())
{
    <div class="products-grid">
        @foreach (var (product, index) in Model.Products.Select((value, i) => (value, i)))
        {
            <div class="product-card" style="animation-delay: @((index * 0.1) + 0.1)s">
                <div class="product-image-wrapper">
                    @if (!string.IsNullOrEmpty(product.ImgUrl))
                    {
                        <img src="@product.ImgUrl" class="product-image" alt="@product.ProductName">
                    }
                    else
                    {
                        <div class="no-image">
                            <i class="fas fa-image fa-3x"></i>
                        </div>
                    }
                    <div class="product-overlay">
                        <a asp-action="Details" asp-route-id="@product.Id" class="btn-view">
                            <i class="fas fa-eye"></i>
                            Xem chi tiết
                        </a>
                    </div>
                </div>
                <div class="product-content">
                    <h6 class="product-title" title="@product.ProductName">@product.ProductName</h6>
                    <span class="category-badge">@product.CategoryName</span>

                    @if (!string.IsNullOrEmpty(product.Description))
                    {
                        <p class="product-description">@product.Description</p>
                    }
                    else
                    {
                        <p class="product-description text-muted fst-italic">Không có mô tả.</p>
                    }

                    <div class="product-price">@product.Price.ToString("C0")</div>

                    <div class="product-actions">
                        <a asp-action="Edit" asp-route-id="@product.Id" class="btn-edit">
                            <i class="fas fa-edit me-1"></i> Sửa
                        </a>
                        <form asp-action="Delete" method="post" class="d-inline" style="flex: 1;">
                            <input type="hidden" name="id" value="@product.Id" />
                            <button type="submit" class="btn-delete w-100"
                                    onclick="return confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')">
                                <i class="fas fa-trash me-1"></i> Xóa
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="empty-state">
        <i class="fas fa-box-open"></i>
        <h4>Không tìm thấy sản phẩm nào</h4>
        <p>Vui lòng thử điều chỉnh bộ lọc hoặc từ khóa tìm kiếm của bạn.</p>
        <a asp-action="Index" class="btn-refresh">
            <i class="fas fa-sync-alt"></i>
            Làm mới danh sách
        </a>
    </div>
}

<!-- Pagination -->
@if (Model.TotalPages > 1)
{
    <div class="pagination-wrapper">
        <nav aria-label="Product navigation">
            <ul class="pagination">
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link"
                           href="@Url.Action("Index", new { page = Model.CurrentPage - 1, searchTerm = Model.SearchTerm, categoryFilter = Model.CategoryFilter })">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                }

                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link"
                           href="@Url.Action("Index", new { page = i, searchTerm = Model.SearchTerm, categoryFilter = Model.CategoryFilter })">@i</a>
                    </li>
                }

                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link"
                           href="@Url.Action("Index", new { page = Model.CurrentPage + 1, searchTerm = Model.SearchTerm, categoryFilter = Model.CategoryFilter })">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
}

@section Scripts {
    <script>
        // Animate elements on load
        document.addEventListener('DOMContentLoaded', function() {
            // Animate search section
            const searchSection = document.querySelector('.search-section');
            searchSection.style.opacity = '0';
            searchSection.style.transform = 'translateY(20px)';
            searchSection.style.transition = 'all 0.6s ease 0.2s';

            setTimeout(() => {
                searchSection.style.opacity = '1';
                searchSection.style.transform = 'translateY(0)';
            }, 200);

            // Animate stat cards
            const statCards = document.querySelectorAll('.stat-card');
            statCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                card.style.transition = `all 0.6s ease ${0.1 + (index * 0.1)}s`;

                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100 + (index * 100));
            });

            // Animate pagination
            const pagination = document.querySelector('.pagination-wrapper');
            if (pagination) {
                pagination.style.opacity = '0';
                pagination.style.transform = 'translateY(20px)';
                pagination.style.transition = 'all 0.6s ease 1s';

                setTimeout(() => {
                    pagination.style.opacity = '1';
                    pagination.style.transform = 'translateY(0)';
                }, 1000);
            }

            // Add hover effect to product cards
            const productCards = document.querySelectorAll('.product-card');
            productCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-10px)';
                });

                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        });
    </script>
}