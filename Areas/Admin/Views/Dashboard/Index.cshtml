@model ProductManagement.Areas.Admin.Models.AdminDashboardViewModel

@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .dashboard-header {
        background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);
        color: white;
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .dashboard-header::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
        animation: rotate 30s linear infinite;
    }

    @@keyframes rotate {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: 800;
        margin-bottom: 0.5rem;
        position: relative;
        z-index: 1;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .dashboard-subtitle {
        font-size: 1.125rem;
        opacity: 0.9;
        margin-bottom: 0;
        position: relative;
        z-index: 1;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: var(--surface-color);
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s ease forwards;
    }

    .stat-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    }

    @@keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 6px;
        border-radius: 20px 20px 0 0;
    }

    .stat-card.products::before {
        background: linear-gradient(90deg, #6366f1, #4f46e5);
    }

    .stat-card.categories::before {
        background: linear-gradient(90deg, #10b981, #059669);
    }

    .stat-card.orders::before {
        background: linear-gradient(90deg, #f59e0b, #d97706);
    }

    .stat-card.revenue::before {
        background: linear-gradient(90deg, #ef4444, #dc2626);
    }

    .stat-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .stat-info h3 {
        font-size: 2.5rem;
        font-weight: 800;
        color: var(--dark-color);
        margin-bottom: 0.5rem;
        line-height: 1;
    }

    .stat-info p {
        color: var(--gray-color);
        font-weight: 600;
        margin-bottom: 0;
        font-size: 1rem;
    }

    .stat-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        color: white;
        opacity: 0.9;
        transition: all 0.3s ease;
    }

    .stat-card:hover .stat-icon {
        opacity: 1;
        transform: scale(1.1);
    }

    .stat-card.products .stat-icon {
        background: linear-gradient(135deg, #6366f1, #4f46e5);
    }

    .stat-card.categories .stat-icon {
        background: linear-gradient(135deg, #10b981, #059669);
    }

    .stat-card.orders .stat-icon {
        background: linear-gradient(135deg, #f59e0b, #d97706);
    }

    .stat-card.revenue .stat-icon {
        background: linear-gradient(135deg, #ef4444, #dc2626);
    }

    .dashboard-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .content-card {
        background: var(--surface-color);
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .content-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }

    .card-header {
        background: var(--surface-dark);
        padding: 1.5rem 2rem;
        border-bottom: none;
    }

    .card-title {
        font-size: 1.5rem;
        font-weight: 800;
        color: var(--dark-color);
        margin-bottom: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .card-title i {
        color: #6366f1;
    }

    .orders-table {
        margin-bottom: 0;
    }

    .orders-table thead th {
        background: var(--surface-dark);
        font-weight: 700;
        color: var(--dark-color);
        border: none;
        padding: 1rem;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .orders-table tbody td {
        padding: 1rem;
        vertical-align: middle;
        border-color: var(--surface-dark);
    }

    .orders-table tbody tr {
        transition: all 0.3s ease;
    }

    .orders-table tbody tr:hover {
        background-color: var(--surface-dark);
        transform: scale(1.01);
    }

    .order-id {
        font-weight: 700;
        color: var(--dark-color);
    }

    .customer-name {
        font-weight: 600;
        color: var(--dark-color);
    }

    .order-amount {
        font-weight: 700;
        color: var(--secondary-color);
    }

    .status-badge {
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-delivered {
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
    }

    .status-pending {
        background: rgba(245, 158, 11, 0.1);
        color: #d97706;
    }

    .status-processing {
        background: rgba(99, 102, 241, 0.1);
        color: #4f46e5;
    }

    .status-cancelled {
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
    }

    .empty-state {
        text-align: center;
        padding: 3rem 2rem;
        color: var(--gray-color);
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .top-products-list {
        padding: 0;
        margin: 0;
    }

    .product-item {
        display: flex;
        align-items: center;
        padding: 1.5rem 2rem;
        border-bottom: 1px solid var(--surface-dark);
        transition: all 0.3s ease;
    }

    .product-item:last-child {
        border-bottom: none;
    }

    .product-item:hover {
        background-color: var(--surface-dark);
    }

    .product-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 12px;
        margin-right: 1rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .no-image {
        width: 60px;
        height: 60px;
        background: var(--surface-dark);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--gray-color);
        margin-right: 1rem;
    }

    .product-info {
        flex: 1;
    }

    .product-name {
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 0.25rem;
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .product-price {
        color: var(--gray-color);
        font-size: 0.875rem;
    }

    .chart-container {
        padding: 2rem;
        height: 400px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chart-placeholder {
        text-align: center;
        color: var(--gray-color);
    }

    .chart-placeholder i {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.3;
    }

    @@media (max-width: 1200px) {
        .dashboard-content {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 991px) {
        .dashboard-title {
            font-size: 2rem;
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (max-width: 768px) {
        .dashboard-header {
            padding: 1.5rem;
        }

        .dashboard-title {
            font-size: 1.75rem;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .stat-card {
            padding: 1.5rem;
        }

        .orders-table thead th,
        .orders-table tbody td {
            padding: 0.75rem 0.5rem;
        }

        .product-item {
            padding: 1rem;
        }

        .product-image,
        .no-image {
            width: 50px;
            height: 50px;
        }
    }
</style>

<div class="dashboard-header">
    <div>
        <h1 class="dashboard-title">
            <i class="fas fa-tachometer-alt"></i>
            Admin Dashboard
        </h1>
        <p class="dashboard-subtitle">Tổng quan hệ thống quản lý</p>
    </div>
</div>

<!-- Statistics Cards -->
<div class="stats-grid">
    <div class="stat-card products" style="animation-delay: 0.1s">
        <div class="stat-content">
            <div class="stat-info">
                <h3>@Model.TotalProducts</h3>
                <p>Sản phẩm</p>
            </div>
            <div class="stat-icon">
                <i class="fas fa-box"></i>
            </div>
        </div>
    </div>
    <div class="stat-card categories" style="animation-delay: 0.2s">
        <div class="stat-content">
            <div class="stat-info">
                <h3>@Model.TotalCategories</h3>
                <p>Danh mục</p>
            </div>
            <div class="stat-icon">
                <i class="fas fa-tags"></i>
            </div>
        </div>
    </div>
    <div class="stat-card orders" style="animation-delay: 0.3s">
        <div class="stat-content">
            <div class="stat-info">
                <h3>@Model.TotalOrders</h3>
                <p>Đơn hàng</p>
            </div>
            <div class="stat-icon">
                <i class="fas fa-shopping-cart"></i>
            </div>
        </div>
    </div>
    <div class="stat-card revenue" style="animation-delay: 0.4s">
        <div class="stat-content">
            <div class="stat-info">
                <h3>@Model.TotalRevenue.ToString("N0")</h3>
                <p>Doanh thu ($)</p>
            </div>
            <div class="stat-icon">
                <i class="fas fa-dollar-sign"></i>
            </div>
        </div>
    </div>
</div>

<!-- Dashboard Content -->
<div class="dashboard-content">
    <!-- Recent Orders -->
    <div class="content-card">
        <div class="card-header">
            <h5 class="card-title">
                <i class="fas fa-history"></i>
                Đơn hàng gần đây
            </h5>
        </div>
        <div class="table-responsive">
            <table class="table orders-table">
                <thead>
                    <tr>
                        <th>Mã ĐH</th>
                        <th>Khách hàng</th>
                        <th>Tổng tiền</th>
                        <th>Trạng thái</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.RecentOrders.Any())
                    {
                        @foreach (var order in Model.RecentOrders)
                        {
                            <tr>
                                <td class="order-id">#@order.Id.ToString("D6")</td>
                                <td class="customer-name">@order.User.FullName</td>
                                <td class="order-amount">@order.TotalAmount.ToString("C0")</td>
                                <td>
                                    <span class="status-badge status-@order.Status.ToString().ToLower()">
                                        @GetOrderStatusText(order.Status)
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4">
                                <div class="empty-state">
                                    <i class="fas fa-box-open"></i>
                                    <p>Không có đơn hàng nào gần đây.</p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Top Selling Products -->
    <div class="content-card">
        <div class="card-header">
            <h5 class="card-title">
                <i class="fas fa-star"></i>
                Sản phẩm bán chạy
            </h5>
        </div>
        @if (Model.TopSellingProducts.Any())
        {
            <div class="top-products-list">
                @foreach (var product in Model.TopSellingProducts)
                {
                    <div class="product-item">
                        @if (!string.IsNullOrEmpty(product.ImgUrl))
                        {
                            <img src="@product.ImgUrl" alt="@product.ProductName" class="product-image">
                        }
                        else
                        {
                            <div class="no-image">
                                <i class="fas fa-image"></i>
                            </div>
                        }
                        <div class="product-info">
                            <div class="product-name" title="@product.ProductName">@product.ProductName</div>
                            <div class="product-price">@product.Price.ToString("C0")</div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-chart-line"></i>
                <p>Chưa có dữ liệu sản phẩm bán chạy.</p>
            </div>
        }
    </div>
</div>

<!-- Charts Section -->
<div class="row">
    <div class="col-lg-6">
        <div class="content-card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-chart-line"></i>
                    Doanh thu theo tháng
                </h5>
            </div>
            <div class="chart-container">
                <canvas id="revenueChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="content-card">
            <div class="card-header">
                <h5 class="card-title">
                    <i class="fas fa-chart-pie"></i>
                    Trạng thái đơn hàng
                </h5>
            </div>
            <div class="chart-container">
                <canvas id="orderStatusChart"></canvas>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetOrderStatusText(OrderStatus status)
    {
        switch (status)
        {
            case OrderStatus.Pending: return "Chờ xử lý";
            case OrderStatus.Confirmed: return "Đã xác nhận";
            case OrderStatus.Processing: return "Đang xử lý";
            case OrderStatus.Shipped: return "Đã gửi hàng";
            case OrderStatus.Delivered: return "Đã giao hàng";
            case OrderStatus.Cancelled: return "Đã hủy";
            case OrderStatus.Returned: return "Đã trả hàng";
            default: return "Không xác định";
        }
    }
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Animate elements on load
        document.addEventListener('DOMContentLoaded', function () {
            // Animate content cards
            const contentCards = document.querySelectorAll('.content-card');
            contentCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                card.style.transition = `all 0.6s ease ${0.5 + (index * 0.1)}s`;

                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 500 + (index * 100));
            });

            // Revenue Chart
            const revenueCtx = document.getElementById('revenueChart').getContext('2d');
            new Chart(revenueCtx, {
                type: 'line',
                data: {
                    labels: ['T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'T10', 'T11', 'T12'],
                    datasets: [{
                        label: 'Doanh thu (VNĐ)',
                        data: [12000000, 19000000, 15000000, 25000000, 22000000, 30000000, 28000000, 35000000, 32000000, 40000000, 38000000, 45000000],
                        borderColor: '#6366f1',
                        backgroundColor: 'rgba(99, 102, 241, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#6366f1',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            ticks: {
                                callback: function (value) {
                                    return new Intl.NumberFormat('vi-VN', {
                                        style: 'currency',
                                        currency: 'VND',
                                        minimumFractionDigits: 0
                                    }).format(value);
                                }
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        }
                    }
                }
            });

            // Order Status Chart
            const statusCtx = document.getElementById('orderStatusChart').getContext('2d');
            new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Chờ xử lý', 'Đã xác nhận', 'Đang xử lý', 'Đã giao hàng', 'Đã hủy'],
                    datasets: [{
                        data: [15, 25, 20, 35, 5],
                        backgroundColor: [
                            '#f59e0b',
                            '#3b82f6',
                            '#8b5cf6',
                            '#10b981',
                            '#ef4444'
                        ],
                        borderWidth: 0,
                        hoverOffset: 10
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true,
                                pointStyle: 'circle'
                            }
                        }
                    }
                }
            });
        });
    </script>
}